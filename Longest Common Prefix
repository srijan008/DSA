class TrieNode {
public:
    char data;
    int charCount;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char ch) {
        data = ch;
        charCount = 0;
        isTerminal = false;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
    }
};

class Trie {
public:
    TrieNode* root;

    Trie(char ch) {
        root = new TrieNode(ch);
    }

    void insertUtil(TrieNode* root, const string& str, int index) {
        if (index == str.length()) {
            root->isTerminal = true;
            return;
        }
        int charIndex = str[index] - 'a';
        TrieNode* child;
        if (root->children[charIndex] == nullptr) {
            child = new TrieNode(str[index]);
            root->children[charIndex] = child;
            root->charCount++;
        } else {
            child = root->children[charIndex];
        }
        insertUtil(child, str, index + 1);
    }

    void insertWord(const string& word) {
        insertUtil(root, word, 0);
    }

    void lcp(const string& str, string& ans) {
        TrieNode* current = root;
        for (int i = 0; i < str.length(); i++) {
            char ch = str[i];
            if (current->charCount == 1) {
                ans.push_back(ch);
                int index = ch - 'a';
                current = current->children[index];
            } else {
                break;
            }
            if (current->isTerminal) {
                break;
            }
        }
    }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    Trie* t = new Trie('\0');

    for(int i = 0; i< n; i++){
        t->insertWord(arr[i]);
    }

    string first = arr[0];
    string ans = "";
    t->lcp(first,  ans);
    return ans;
}


